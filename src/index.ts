import * as E from "fp-ts/Either";
import * as RTE from "fp-ts/ReaderTaskEither";
import { pipe } from "fp-ts/function";

import * as Api from "./api";
import { Env } from "./types";

const schema = {
  schema: {
    properties: {
      firstName: {
        type: "string",
        label: "First Name",
      },
      lastName: {
        type: "string",
        label: "Last Name",
      },
      email: {
        type: "string",
        label: "Email Address",
        format: "email",
      },
      phone: {
        type: "string",
        label: "Phone Number",
        format: "phone",
      },
      date: {
        type: "string",
        label: "Date",
      },
      country: {
        type: "string",
        label: "Country",
      },
      postalCode: {
        type: "string",
        label: "Postal Code",
      },
      optIn: {
        type: "boolean",
        label: "Opt In",
      },
      dealStatus: {
        type: "string",
        label: "Deal Status",
        enumLabel: [
          "Prospecting",
          "Discovery",
          "Proposal",
          "Negotiation",
          "Closed Won",
          "Closed Lost",
        ],
        enum: ["Prospecting", "Discovery", "Proposal", "Negotiation", "Closed Won", "Closed Lost"],
      },
    },
    type: "object",
    required: ["lastName"],
    unique: ["email"],
  },
};

const randomId = (): string => {
  return `${Math.floor(Date.now() / 1000)}`;
};

const main = async () => {
  try {
    const env: Env = {
      accessKeyId: process.env.FLATFILE_ACCESS_KEY_ID || "",
      apiHost: process.env.FLATFILE_API_HOST || "",
      secretAccessKey: process.env.FLATFILE_SECRET_ACCESS_KEY || "",
      accessToken: "",
      teamId: process.env.FLATFILE_TEAM_ID || "",
    };

    if (env.accessKeyId === "" || env.secretAccessKey === "") {
      throw "Ensure both FLATFILE_ACCESS_KEY_ID and FLATFILE_SECRET_ACCESS_KEY env vars are set";
    }

    const tokenPromise = Api.createToken()(env);
    const token = await tokenPromise();

    pipe(
      token,
      E.match(
        () => {
          throw "Failed to create token!";
        },
        async (accessToken) => {
          const pipelinePromise = pipe(
            Api.createTemplate({
              teamId: env.teamId,
              templateName: `AutoGenerated-${randomId()}`,
              schema: schema,
            }),
            RTE.chain((template) => {
              console.log("template: ", template);

              return Api.createDataHook(template.id);
            }),
            RTE.chain((dataHook) => {
              console.log("dataHook: ", dataHook);

              return Api.updateDataHook({
                id: dataHook.id,
                name: `DH-${randomId()}`,
                description: "Some really helpful descripion...",
                code: `
                  module.exports = ({ recordBatch, _session, logger }) => {
                    return recordBatch.records.forEach(() => {
                      logger.info("hello");
                    });
                  };
                `,
              });
            }),
          )({ ...env, accessToken });

          const response = await pipelinePromise();
          console.log("response: ", response);
        },
      ),
    );
  } catch (err) {
    console.error(`Error: ${err}!`);
  }
};

main();

// "packageJSON": "{\"dependencies\":{}}",
